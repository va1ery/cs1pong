-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hud_gen is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    op_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    op_TVALID : OUT STD_LOGIC;
    op_TREADY : IN STD_LOGIC;
    op_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    op_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    op_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    op_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    op_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    op_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of hud_gen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hud_gen,hls_ip_2019_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=1213,HLS_SYN_LUT=2040,HLS_VERSION=2019_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFF6 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111110110";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv31_3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_7F0000FF : STD_LOGIC_VECTOR (31 downto 0) := "01111111000000000000000011111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal op_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal op_V_data_V_1_vld_in : STD_LOGIC;
    signal op_V_data_V_1_vld_out : STD_LOGIC;
    signal op_V_data_V_1_ack_in : STD_LOGIC;
    signal op_V_data_V_1_ack_out : STD_LOGIC;
    signal op_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal op_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal op_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal op_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal op_V_data_V_1_sel : STD_LOGIC;
    signal op_V_data_V_1_load_A : STD_LOGIC;
    signal op_V_data_V_1_load_B : STD_LOGIC;
    signal op_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal op_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal op_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal op_V_keep_V_1_vld_in : STD_LOGIC;
    signal op_V_keep_V_1_vld_out : STD_LOGIC;
    signal op_V_keep_V_1_ack_out : STD_LOGIC;
    signal op_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal op_V_keep_V_1_sel : STD_LOGIC;
    signal op_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal op_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal op_V_strb_V_1_vld_in : STD_LOGIC;
    signal op_V_strb_V_1_vld_out : STD_LOGIC;
    signal op_V_strb_V_1_ack_out : STD_LOGIC;
    signal op_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal op_V_strb_V_1_sel : STD_LOGIC;
    signal op_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal op_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal op_V_user_V_1_vld_in : STD_LOGIC;
    signal op_V_user_V_1_vld_out : STD_LOGIC;
    signal op_V_user_V_1_ack_in : STD_LOGIC;
    signal op_V_user_V_1_ack_out : STD_LOGIC;
    signal op_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal op_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal op_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal op_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal op_V_user_V_1_sel : STD_LOGIC;
    signal op_V_user_V_1_load_A : STD_LOGIC;
    signal op_V_user_V_1_load_B : STD_LOGIC;
    signal op_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal op_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal op_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal op_V_last_V_1_vld_in : STD_LOGIC;
    signal op_V_last_V_1_vld_out : STD_LOGIC;
    signal op_V_last_V_1_ack_in : STD_LOGIC;
    signal op_V_last_V_1_ack_out : STD_LOGIC;
    signal op_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal op_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal op_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal op_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal op_V_last_V_1_sel : STD_LOGIC;
    signal op_V_last_V_1_load_A : STD_LOGIC;
    signal op_V_last_V_1_load_B : STD_LOGIC;
    signal op_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal op_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal op_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal op_V_id_V_1_vld_in : STD_LOGIC;
    signal op_V_id_V_1_vld_out : STD_LOGIC;
    signal op_V_id_V_1_ack_out : STD_LOGIC;
    signal op_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal op_V_id_V_1_sel : STD_LOGIC;
    signal op_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal op_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal op_V_dest_V_1_vld_in : STD_LOGIC;
    signal op_V_dest_V_1_vld_out : STD_LOGIC;
    signal op_V_dest_V_1_ack_out : STD_LOGIC;
    signal op_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal op_V_dest_V_1_sel : STD_LOGIC;
    signal op_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal row : STD_LOGIC_VECTOR (31 downto 0);
    signal column : STD_LOGIC_VECTOR (31 downto 0);
    signal ball_y : STD_LOGIC_VECTOR (31 downto 0);
    signal ball_x : STD_LOGIC_VECTOR (31 downto 0);
    signal ball_size : STD_LOGIC_VECTOR (31 downto 0);
    signal ball_colour : STD_LOGIC_VECTOR (31 downto 0);
    signal bar_pos_x : STD_LOGIC_VECTOR (31 downto 0);
    signal bar_width : STD_LOGIC_VECTOR (31 downto 0);
    signal op_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln25_reg_876 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln25_reg_876_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_175 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_0_reg_186 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_0_reg_197 : STD_LOGIC_VECTOR (30 downto 0);
    signal bar_width_read_reg_776 : STD_LOGIC_VECTOR (31 downto 0);
    signal bar_pos_x_read_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal ball_size_read_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal ball_x_read_reg_795 : STD_LOGIC_VECTOR (31 downto 0);
    signal ball_y_read_reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_read_reg_807 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_read_reg_815 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln40_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln40_reg_827 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln40_1_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln40_1_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_1_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_1_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_1_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_1_reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_2_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_2_reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_254_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_871 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln25_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln25_fu_340_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln25_4_fu_454_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln25_4_reg_885 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln28_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_890 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_899 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_2_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_2_reg_905 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_2_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_2_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_3_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_3_reg_918 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_590_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_user_V_1_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_1_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_1_fu_734_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_phi_mux_y_0_phi_fu_190_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_data_V_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_fu_96 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_fu_100 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_254_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln25_1_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln40_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_1_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_1_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_3_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_2_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_2_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_1_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln27_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_1_fu_346_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln27_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln25_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln40_2_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_3_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_2_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_3_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_2_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_5_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_4_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_4_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_4_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_3_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_1_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_4_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_fu_356_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln28_fu_462_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln25_2_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln40_4_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_5_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_6_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_7_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_2_fu_428_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_4_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_5_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_5_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_6_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_3_fu_442_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_4_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_1_fu_414_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln48_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln48_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_1_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln48_2_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln48_1_fu_576_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln28_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_1_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_3_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_622_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_1_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln48_fu_605_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_691_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln32_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_1_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_7_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_3_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_1_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_1_fu_698_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_254_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_254_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component hud_gen_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        row : OUT STD_LOGIC_VECTOR (31 downto 0);
        column : OUT STD_LOGIC_VECTOR (31 downto 0);
        ball_y : OUT STD_LOGIC_VECTOR (31 downto 0);
        ball_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        ball_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ball_colour : OUT STD_LOGIC_VECTOR (31 downto 0);
        bar_pos_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        bar_width : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hud_gen_AXILiteS_s_axi_U : component hud_gen_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        row => row,
        column => column,
        ball_y => ball_y,
        ball_x => ball_x,
        ball_size => ball_size,
        ball_colour => ball_colour,
        bar_pos_x => bar_pos_x,
        bar_width => bar_width);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    op_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((op_V_data_V_1_ack_out = ap_const_logic_1) and (op_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        op_V_data_V_1_sel_rd <= not(op_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    op_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((op_V_data_V_1_ack_in = ap_const_logic_1) and (op_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        op_V_data_V_1_sel_wr <= not(op_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    op_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((op_V_data_V_1_state = ap_const_lv2_2) and (op_V_data_V_1_vld_in = ap_const_logic_0)) or ((op_V_data_V_1_state = ap_const_lv2_3) and (op_V_data_V_1_vld_in = ap_const_logic_0) and (op_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    op_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((op_V_data_V_1_state = ap_const_lv2_1) and (op_TREADY = ap_const_logic_0)) or ((op_V_data_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0) and (op_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    op_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((op_V_data_V_1_vld_in = ap_const_logic_0) and (op_V_data_V_1_ack_out = ap_const_logic_1))) and not(((op_TREADY = ap_const_logic_0) and (op_V_data_V_1_vld_in = ap_const_logic_1))) and (op_V_data_V_1_state = ap_const_lv2_3)) or ((op_V_data_V_1_state = ap_const_lv2_1) and (op_V_data_V_1_ack_out = ap_const_logic_1)) or ((op_V_data_V_1_state = ap_const_lv2_2) and (op_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    op_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    op_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    op_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((op_V_dest_V_1_ack_out = ap_const_logic_1) and (op_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        op_V_dest_V_1_sel_rd <= not(op_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    op_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((op_V_dest_V_1_state = ap_const_lv2_2) and (op_V_dest_V_1_vld_in = ap_const_logic_0)) or ((op_V_dest_V_1_state = ap_const_lv2_3) and (op_V_dest_V_1_vld_in = ap_const_logic_0) and (op_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    op_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((op_V_dest_V_1_state = ap_const_lv2_1) and (op_TREADY = ap_const_logic_0)) or ((op_V_dest_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0) and (op_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    op_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((op_V_dest_V_1_vld_in = ap_const_logic_0) and (op_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((op_TREADY = ap_const_logic_0) and (op_V_dest_V_1_vld_in = ap_const_logic_1))) and (op_V_dest_V_1_state = ap_const_lv2_3)) or ((op_V_dest_V_1_state = ap_const_lv2_1) and (op_V_dest_V_1_ack_out = ap_const_logic_1)) or ((op_V_dest_V_1_state = ap_const_lv2_2) and (op_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    op_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    op_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    op_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((op_V_id_V_1_ack_out = ap_const_logic_1) and (op_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        op_V_id_V_1_sel_rd <= not(op_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    op_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((op_V_id_V_1_state = ap_const_lv2_2) and (op_V_id_V_1_vld_in = ap_const_logic_0)) or ((op_V_id_V_1_state = ap_const_lv2_3) and (op_V_id_V_1_vld_in = ap_const_logic_0) and (op_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    op_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((op_V_id_V_1_state = ap_const_lv2_1) and (op_TREADY = ap_const_logic_0)) or ((op_V_id_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0) and (op_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    op_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((op_V_id_V_1_vld_in = ap_const_logic_0) and (op_V_id_V_1_ack_out = ap_const_logic_1))) and not(((op_TREADY = ap_const_logic_0) and (op_V_id_V_1_vld_in = ap_const_logic_1))) and (op_V_id_V_1_state = ap_const_lv2_3)) or ((op_V_id_V_1_state = ap_const_lv2_1) and (op_V_id_V_1_ack_out = ap_const_logic_1)) or ((op_V_id_V_1_state = ap_const_lv2_2) and (op_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    op_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    op_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    op_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((op_V_keep_V_1_vld_out = ap_const_logic_1) and (op_V_keep_V_1_ack_out = ap_const_logic_1))) then 
                                        op_V_keep_V_1_sel_rd <= not(op_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    op_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((op_V_keep_V_1_state = ap_const_lv2_2) and (op_V_keep_V_1_vld_in = ap_const_logic_0)) or ((op_V_keep_V_1_state = ap_const_lv2_3) and (op_V_keep_V_1_vld_in = ap_const_logic_0) and (op_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    op_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((op_V_keep_V_1_state = ap_const_lv2_1) and (op_TREADY = ap_const_logic_0)) or ((op_V_keep_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0) and (op_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    op_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((op_V_keep_V_1_vld_in = ap_const_logic_0) and (op_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((op_TREADY = ap_const_logic_0) and (op_V_keep_V_1_vld_in = ap_const_logic_1))) and (op_V_keep_V_1_state = ap_const_lv2_3)) or ((op_V_keep_V_1_state = ap_const_lv2_1) and (op_V_keep_V_1_ack_out = ap_const_logic_1)) or ((op_V_keep_V_1_state = ap_const_lv2_2) and (op_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    op_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    op_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    op_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((op_V_last_V_1_ack_out = ap_const_logic_1) and (op_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        op_V_last_V_1_sel_rd <= not(op_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    op_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((op_V_last_V_1_ack_in = ap_const_logic_1) and (op_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        op_V_last_V_1_sel_wr <= not(op_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    op_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((op_V_last_V_1_state = ap_const_lv2_2) and (op_V_last_V_1_vld_in = ap_const_logic_0)) or ((op_V_last_V_1_state = ap_const_lv2_3) and (op_V_last_V_1_vld_in = ap_const_logic_0) and (op_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    op_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((op_V_last_V_1_state = ap_const_lv2_1) and (op_TREADY = ap_const_logic_0)) or ((op_V_last_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0) and (op_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    op_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((op_V_last_V_1_vld_in = ap_const_logic_0) and (op_V_last_V_1_ack_out = ap_const_logic_1))) and not(((op_TREADY = ap_const_logic_0) and (op_V_last_V_1_vld_in = ap_const_logic_1))) and (op_V_last_V_1_state = ap_const_lv2_3)) or ((op_V_last_V_1_state = ap_const_lv2_1) and (op_V_last_V_1_ack_out = ap_const_logic_1)) or ((op_V_last_V_1_state = ap_const_lv2_2) and (op_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    op_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    op_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    op_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((op_V_strb_V_1_ack_out = ap_const_logic_1) and (op_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        op_V_strb_V_1_sel_rd <= not(op_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    op_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((op_V_strb_V_1_state = ap_const_lv2_2) and (op_V_strb_V_1_vld_in = ap_const_logic_0)) or ((op_V_strb_V_1_state = ap_const_lv2_3) and (op_V_strb_V_1_vld_in = ap_const_logic_0) and (op_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    op_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((op_V_strb_V_1_state = ap_const_lv2_1) and (op_TREADY = ap_const_logic_0)) or ((op_V_strb_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0) and (op_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    op_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((op_V_strb_V_1_vld_in = ap_const_logic_0) and (op_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((op_TREADY = ap_const_logic_0) and (op_V_strb_V_1_vld_in = ap_const_logic_1))) and (op_V_strb_V_1_state = ap_const_lv2_3)) or ((op_V_strb_V_1_state = ap_const_lv2_1) and (op_V_strb_V_1_ack_out = ap_const_logic_1)) or ((op_V_strb_V_1_state = ap_const_lv2_2) and (op_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    op_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    op_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    op_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((op_V_user_V_1_ack_out = ap_const_logic_1) and (op_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        op_V_user_V_1_sel_rd <= not(op_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    op_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((op_V_user_V_1_ack_in = ap_const_logic_1) and (op_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        op_V_user_V_1_sel_wr <= not(op_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    op_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                op_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((op_V_user_V_1_state = ap_const_lv2_2) and (op_V_user_V_1_vld_in = ap_const_logic_0)) or ((op_V_user_V_1_state = ap_const_lv2_3) and (op_V_user_V_1_vld_in = ap_const_logic_0) and (op_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    op_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((op_V_user_V_1_state = ap_const_lv2_1) and (op_TREADY = ap_const_logic_0)) or ((op_V_user_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0) and (op_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    op_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((op_V_user_V_1_vld_in = ap_const_logic_0) and (op_V_user_V_1_ack_out = ap_const_logic_1))) and not(((op_TREADY = ap_const_logic_0) and (op_V_user_V_1_vld_in = ap_const_logic_1))) and (op_V_user_V_1_state = ap_const_lv2_3)) or ((op_V_user_V_1_state = ap_const_lv2_1) and (op_V_user_V_1_ack_out = ap_const_logic_1)) or ((op_V_user_V_1_state = ap_const_lv2_2) and (op_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    op_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    op_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_fu_335_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_175 <= add_ln25_fu_340_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_175 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    x_0_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_fu_335_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                x_0_reg_197 <= x_fu_590_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                x_0_reg_197 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    y_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_876 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                y_0_reg_186 <= select_ln25_4_reg_885;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                y_0_reg_186 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln32_reg_822 <= add_ln32_fu_208_p2;
                add_ln40_1_reg_843 <= add_ln40_1_fu_225_p2;
                add_ln40_reg_832 <= add_ln40_fu_217_p2;
                add_ln44_1_reg_854 <= add_ln44_1_fu_233_p2;
                add_ln44_2_reg_860 <= add_ln44_2_fu_238_p2;
                add_ln44_reg_849 <= add_ln44_fu_229_p2;
                add_ln48_reg_866 <= add_ln48_fu_243_p2;
                bound_reg_871 <= bound_fu_254_p2;
                sub_ln40_1_reg_837 <= sub_ln40_1_fu_221_p2;
                sub_ln40_reg_827 <= sub_ln40_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln40_2_reg_905 <= and_ln40_2_fu_507_p2;
                and_ln44_2_reg_912 <= and_ln44_2_fu_541_p2;
                icmp_ln28_reg_890 <= icmp_ln28_fu_468_p2;
                icmp_ln32_reg_899 <= icmp_ln32_fu_474_p2;
                icmp_ln48_3_reg_918 <= icmp_ln48_3_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ball_size_read_reg_787 <= ball_size;
                ball_x_read_reg_795 <= ball_x;
                ball_y_read_reg_801 <= ball_y;
                bar_pos_x_read_reg_781 <= bar_pos_x;
                bar_width_read_reg_776 <= bar_width;
                column_read_reg_807 <= column;
                row_read_reg_815 <= row;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln25_reg_876 <= icmp_ln25_fu_335_p2;
                icmp_ln25_reg_876_pp0_iter1_reg <= icmp_ln25_reg_876;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((op_V_data_V_1_load_A = ap_const_logic_1)) then
                op_V_data_V_1_payload_A <= tmp_data_V_1_fu_734_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((op_V_data_V_1_load_B = ap_const_logic_1)) then
                op_V_data_V_1_payload_B <= tmp_data_V_1_fu_734_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((op_V_last_V_1_load_A = ap_const_logic_1)) then
                op_V_last_V_1_payload_A <= tmp_last_V_1_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((op_V_last_V_1_load_B = ap_const_logic_1)) then
                op_V_last_V_1_payload_B <= tmp_last_V_1_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((op_V_user_V_1_load_A = ap_const_logic_1)) then
                op_V_user_V_1_payload_A <= tmp_user_V_1_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((op_V_user_V_1_load_B = ap_const_logic_1)) then
                op_V_user_V_1_payload_B <= tmp_user_V_1_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_fu_335_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln25_4_reg_885 <= select_ln25_4_fu_454_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_876 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_data_V_fu_92 <= tmp_data_V_1_fu_734_p3;
                tmp_last_V_fu_96 <= tmp_last_V_1_fu_684_p2;
                tmp_user_V_fu_100 <= tmp_user_V_1_fu_666_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, op_TREADY, op_V_data_V_1_state, op_V_keep_V_1_state, op_V_strb_V_1_state, op_V_user_V_1_state, op_V_last_V_1_state, op_V_id_V_1_state, op_V_dest_V_1_state, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln25_fu_335_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln25_fu_335_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln25_fu_335_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((op_V_dest_V_1_state = ap_const_lv2_1) or (op_V_id_V_1_state = ap_const_lv2_1) or (op_V_last_V_1_state = ap_const_lv2_1) or (op_V_user_V_1_state = ap_const_lv2_1) or (op_V_strb_V_1_state = ap_const_lv2_1) or (op_V_keep_V_1_state = ap_const_lv2_1) or (op_V_data_V_1_state = ap_const_lv2_1) or ((op_V_data_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_dest_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_id_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_last_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_user_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_strb_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_keep_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln25_1_fu_346_p2 <= std_logic_vector(unsigned(ap_phi_mux_y_0_phi_fu_190_p4) + unsigned(ap_const_lv31_1));
    add_ln25_fu_340_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_175) + unsigned(ap_const_lv64_1));
    add_ln32_fu_208_p2 <= std_logic_vector(unsigned(column_read_reg_807) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln40_1_fu_225_p2 <= std_logic_vector(unsigned(ball_size_read_reg_787) + unsigned(ball_y_read_reg_801));
    add_ln40_fu_217_p2 <= std_logic_vector(unsigned(ball_size_read_reg_787) + unsigned(ball_x_read_reg_795));
    add_ln44_1_fu_233_p2 <= std_logic_vector(unsigned(row_read_reg_815) + unsigned(ap_const_lv32_FFFFFFF6));
    add_ln44_2_fu_238_p2 <= std_logic_vector(unsigned(row_read_reg_815) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln44_fu_229_p2 <= std_logic_vector(unsigned(bar_width_read_reg_776) + unsigned(bar_pos_x_read_reg_781));
    add_ln48_fu_243_p2 <= std_logic_vector(unsigned(column_read_reg_807) + unsigned(ap_const_lv32_FFFFFFFD));
    and_ln28_fu_673_p2 <= (tmp_last_V_fu_96 and icmp_ln28_reg_890);
    and_ln32_fu_617_p2 <= (xor_ln28_fu_612_p2 and icmp_ln32_reg_899);
    and_ln40_1_fu_314_p2 <= (xor_ln40_3_fu_280_p2 and xor_ln40_2_fu_269_p2);
    and_ln40_2_fu_507_p2 <= (select_ln25_2_fu_428_p3 and and_ln40_fu_501_p2);
    and_ln40_3_fu_712_p2 <= (xor_ln32_fu_706_p2 and and_ln40_2_reg_905);
    and_ln40_4_fu_422_p2 <= (xor_ln40_5_fu_380_p2 and xor_ln40_4_fu_369_p2);
    and_ln40_fu_501_p2 <= (xor_ln40_7_fu_495_p2 and xor_ln40_6_fu_484_p2);
    and_ln44_1_fu_320_p2 <= (xor_ln44_2_fu_302_p2 and xor_ln44_1_fu_291_p2);
    and_ln44_2_fu_541_p2 <= (select_ln25_3_fu_442_p3 and and_ln44_fu_535_p2);
    and_ln44_3_fu_660_p2 <= (or_ln44_fu_654_p2 and or_ln40_fu_638_p2);
    and_ln44_4_fu_436_p2 <= (xor_ln44_4_fu_402_p2 and xor_ln44_3_fu_391_p2);
    and_ln44_7_fu_723_p2 <= (xor_ln40_1_fu_717_p2 and and_ln44_2_reg_912);
    and_ln44_fu_535_p2 <= (xor_ln44_6_fu_529_p2 and xor_ln44_5_fu_518_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(op_V_data_V_1_ack_in, icmp_ln25_reg_876)
    begin
                ap_block_state4_io <= ((icmp_ln25_reg_876 = ap_const_lv1_0) and (op_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(op_V_data_V_1_ack_in, icmp_ln25_reg_876_pp0_iter1_reg)
    begin
                ap_block_state5_io <= ((icmp_ln25_reg_876_pp0_iter1_reg = ap_const_lv1_0) and (op_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_assign_proc : process(op_TREADY, op_V_data_V_1_state, op_V_keep_V_1_state, op_V_strb_V_1_state, op_V_user_V_1_state, op_V_last_V_1_state, op_V_id_V_1_state, op_V_dest_V_1_state)
    begin
                ap_block_state6 <= ((op_V_dest_V_1_state = ap_const_lv2_1) or (op_V_id_V_1_state = ap_const_lv2_1) or (op_V_last_V_1_state = ap_const_lv2_1) or (op_V_user_V_1_state = ap_const_lv2_1) or (op_V_strb_V_1_state = ap_const_lv2_1) or (op_V_keep_V_1_state = ap_const_lv2_1) or (op_V_data_V_1_state = ap_const_lv2_1) or ((op_V_data_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_dest_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_id_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_last_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_user_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_strb_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_keep_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln25_fu_335_p2)
    begin
        if ((icmp_ln25_fu_335_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(op_TREADY, op_V_data_V_1_state, op_V_keep_V_1_state, op_V_strb_V_1_state, op_V_user_V_1_state, op_V_last_V_1_state, op_V_id_V_1_state, op_V_dest_V_1_state, ap_CS_fsm_state6)
    begin
        if ((not(((op_V_dest_V_1_state = ap_const_lv2_1) or (op_V_id_V_1_state = ap_const_lv2_1) or (op_V_last_V_1_state = ap_const_lv2_1) or (op_V_user_V_1_state = ap_const_lv2_1) or (op_V_strb_V_1_state = ap_const_lv2_1) or (op_V_keep_V_1_state = ap_const_lv2_1) or (op_V_data_V_1_state = ap_const_lv2_1) or ((op_V_data_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_dest_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_id_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_last_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_user_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_strb_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_keep_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_y_0_phi_fu_190_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_876, y_0_reg_186, select_ln25_4_reg_885)
    begin
        if (((icmp_ln25_reg_876 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_y_0_phi_fu_190_p4 <= select_ln25_4_reg_885;
        else 
            ap_phi_mux_y_0_phi_fu_190_p4 <= y_0_reg_186;
        end if; 
    end process;


    ap_ready_assign_proc : process(op_TREADY, op_V_data_V_1_state, op_V_keep_V_1_state, op_V_strb_V_1_state, op_V_user_V_1_state, op_V_last_V_1_state, op_V_id_V_1_state, op_V_dest_V_1_state, ap_CS_fsm_state6)
    begin
        if ((not(((op_V_dest_V_1_state = ap_const_lv2_1) or (op_V_id_V_1_state = ap_const_lv2_1) or (op_V_last_V_1_state = ap_const_lv2_1) or (op_V_user_V_1_state = ap_const_lv2_1) or (op_V_strb_V_1_state = ap_const_lv2_1) or (op_V_keep_V_1_state = ap_const_lv2_1) or (op_V_data_V_1_state = ap_const_lv2_1) or ((op_V_data_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_dest_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_id_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_last_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_user_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_strb_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)) or ((op_V_keep_V_1_state = ap_const_lv2_3) and (op_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bound_fu_254_p0 <= bound_fu_254_p00(32 - 1 downto 0);
    bound_fu_254_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(column_read_reg_807),64));
    bound_fu_254_p1 <= bound_fu_254_p10(32 - 1 downto 0);
    bound_fu_254_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_read_reg_815),64));
    bound_fu_254_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_254_p0) * unsigned(bound_fu_254_p1), 64));
    icmp_ln25_fu_335_p2 <= "1" when (indvar_flatten_reg_175 = bound_reg_871) else "0";
    icmp_ln27_fu_330_p2 <= "1" when (signed(zext_ln27_fu_326_p1) < signed(column_read_reg_807)) else "0";
    icmp_ln28_fu_468_p2 <= "1" when (or_ln28_fu_462_p2 = ap_const_lv31_0) else "0";
    icmp_ln32_fu_474_p2 <= "1" when (zext_ln25_2_fu_450_p1 = add_ln32_reg_822) else "0";
    icmp_ln40_1_fu_275_p2 <= "1" when (signed(add_ln40_1_reg_843) < signed(zext_ln25_1_fu_260_p1)) else "0";
    icmp_ln40_2_fu_364_p2 <= "1" when (signed(zext_ln25_fu_352_p1) < signed(sub_ln40_1_reg_837)) else "0";
    icmp_ln40_3_fu_375_p2 <= "1" when (signed(add_ln40_1_reg_843) < signed(zext_ln25_fu_352_p1)) else "0";
    icmp_ln40_4_fu_479_p2 <= "1" when (signed(zext_ln25_2_fu_450_p1) < signed(sub_ln40_reg_827)) else "0";
    icmp_ln40_5_fu_490_p2 <= "1" when (signed(add_ln40_reg_832) < signed(zext_ln25_2_fu_450_p1)) else "0";
    icmp_ln40_fu_264_p2 <= "1" when (signed(zext_ln25_1_fu_260_p1) < signed(sub_ln40_1_reg_837)) else "0";
    icmp_ln44_1_fu_297_p2 <= "1" when (signed(add_ln44_2_reg_860) < signed(zext_ln25_1_fu_260_p1)) else "0";
    icmp_ln44_2_fu_386_p2 <= "1" when (signed(zext_ln25_fu_352_p1) < signed(add_ln44_1_reg_854)) else "0";
    icmp_ln44_3_fu_397_p2 <= "1" when (signed(add_ln44_2_reg_860) < signed(zext_ln25_fu_352_p1)) else "0";
    icmp_ln44_4_fu_513_p2 <= "1" when (unsigned(zext_ln25_2_fu_450_p1) < unsigned(bar_pos_x_read_reg_781)) else "0";
    icmp_ln44_5_fu_524_p2 <= "1" when (unsigned(add_ln44_reg_849) < unsigned(zext_ln25_2_fu_450_p1)) else "0";
    icmp_ln44_fu_286_p2 <= "1" when (signed(zext_ln25_1_fu_260_p1) < signed(add_ln44_1_reg_854)) else "0";
    icmp_ln48_1_fu_547_p2 <= "1" when (unsigned(select_ln25_fu_356_p3) < unsigned(ap_const_lv31_3)) else "0";
    icmp_ln48_2_fu_408_p2 <= "1" when (unsigned(add_ln25_1_fu_346_p2) < unsigned(ap_const_lv31_3)) else "0";
    icmp_ln48_3_fu_584_p2 <= "1" when (or_ln48_1_fu_576_p3 = ap_const_lv32_0) else "0";
    icmp_ln48_4_fu_553_p2 <= "1" when (signed(zext_ln25_2_fu_450_p1) < signed(add_ln48_reg_866)) else "0";
    icmp_ln48_fu_308_p2 <= "1" when (unsigned(ap_phi_mux_y_0_phi_fu_190_p4) < unsigned(ap_const_lv31_3)) else "0";
    op_TDATA <= op_V_data_V_1_data_out;

    op_TDATA_blk_n_assign_proc : process(op_V_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_876, ap_enable_reg_pp0_iter2, icmp_ln25_reg_876_pp0_iter1_reg)
    begin
        if ((((icmp_ln25_reg_876_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln25_reg_876 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            op_TDATA_blk_n <= op_V_data_V_1_state(1);
        else 
            op_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    op_TDEST <= op_V_dest_V_1_data_out;
    op_TID <= op_V_id_V_1_data_out;
    op_TKEEP <= op_V_keep_V_1_data_out;
    op_TLAST <= op_V_last_V_1_data_out;
    op_TSTRB <= op_V_strb_V_1_data_out;
    op_TUSER <= op_V_user_V_1_data_out;
    op_TVALID <= op_V_dest_V_1_state(0);
    op_V_data_V_1_ack_in <= op_V_data_V_1_state(1);
    op_V_data_V_1_ack_out <= op_TREADY;

    op_V_data_V_1_data_out_assign_proc : process(op_V_data_V_1_payload_A, op_V_data_V_1_payload_B, op_V_data_V_1_sel)
    begin
        if ((op_V_data_V_1_sel = ap_const_logic_1)) then 
            op_V_data_V_1_data_out <= op_V_data_V_1_payload_B;
        else 
            op_V_data_V_1_data_out <= op_V_data_V_1_payload_A;
        end if; 
    end process;

    op_V_data_V_1_load_A <= (op_V_data_V_1_state_cmp_full and not(op_V_data_V_1_sel_wr));
    op_V_data_V_1_load_B <= (op_V_data_V_1_state_cmp_full and op_V_data_V_1_sel_wr);
    op_V_data_V_1_sel <= op_V_data_V_1_sel_rd;
    op_V_data_V_1_state_cmp_full <= '0' when (op_V_data_V_1_state = ap_const_lv2_1) else '1';

    op_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_876, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_876 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            op_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            op_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    op_V_data_V_1_vld_out <= op_V_data_V_1_state(0);
    op_V_dest_V_1_ack_out <= op_TREADY;
    op_V_dest_V_1_data_out <= ap_const_lv1_0;
    op_V_dest_V_1_sel <= op_V_dest_V_1_sel_rd;

    op_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_876, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_876 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            op_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            op_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    op_V_dest_V_1_vld_out <= op_V_dest_V_1_state(0);
    op_V_id_V_1_ack_out <= op_TREADY;
    op_V_id_V_1_data_out <= ap_const_lv1_0;
    op_V_id_V_1_sel <= op_V_id_V_1_sel_rd;

    op_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_876, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_876 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            op_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            op_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    op_V_id_V_1_vld_out <= op_V_id_V_1_state(0);
    op_V_keep_V_1_ack_out <= op_TREADY;
    op_V_keep_V_1_data_out <= ap_const_lv4_0;
    op_V_keep_V_1_sel <= op_V_keep_V_1_sel_rd;

    op_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_876, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_876 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            op_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            op_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    op_V_keep_V_1_vld_out <= op_V_keep_V_1_state(0);
    op_V_last_V_1_ack_in <= op_V_last_V_1_state(1);
    op_V_last_V_1_ack_out <= op_TREADY;

    op_V_last_V_1_data_out_assign_proc : process(op_V_last_V_1_payload_A, op_V_last_V_1_payload_B, op_V_last_V_1_sel)
    begin
        if ((op_V_last_V_1_sel = ap_const_logic_1)) then 
            op_V_last_V_1_data_out <= op_V_last_V_1_payload_B;
        else 
            op_V_last_V_1_data_out <= op_V_last_V_1_payload_A;
        end if; 
    end process;

    op_V_last_V_1_load_A <= (op_V_last_V_1_state_cmp_full and not(op_V_last_V_1_sel_wr));
    op_V_last_V_1_load_B <= (op_V_last_V_1_state_cmp_full and op_V_last_V_1_sel_wr);
    op_V_last_V_1_sel <= op_V_last_V_1_sel_rd;
    op_V_last_V_1_state_cmp_full <= '0' when (op_V_last_V_1_state = ap_const_lv2_1) else '1';

    op_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_876, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_876 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            op_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            op_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    op_V_last_V_1_vld_out <= op_V_last_V_1_state(0);
    op_V_strb_V_1_ack_out <= op_TREADY;
    op_V_strb_V_1_data_out <= ap_const_lv4_0;
    op_V_strb_V_1_sel <= op_V_strb_V_1_sel_rd;

    op_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_876, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_876 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            op_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            op_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    op_V_strb_V_1_vld_out <= op_V_strb_V_1_state(0);
    op_V_user_V_1_ack_in <= op_V_user_V_1_state(1);
    op_V_user_V_1_ack_out <= op_TREADY;

    op_V_user_V_1_data_out_assign_proc : process(op_V_user_V_1_payload_A, op_V_user_V_1_payload_B, op_V_user_V_1_sel)
    begin
        if ((op_V_user_V_1_sel = ap_const_logic_1)) then 
            op_V_user_V_1_data_out <= op_V_user_V_1_payload_B;
        else 
            op_V_user_V_1_data_out <= op_V_user_V_1_payload_A;
        end if; 
    end process;

    op_V_user_V_1_load_A <= (op_V_user_V_1_state_cmp_full and not(op_V_user_V_1_sel_wr));
    op_V_user_V_1_load_B <= (op_V_user_V_1_state_cmp_full and op_V_user_V_1_sel_wr);
    op_V_user_V_1_sel <= op_V_user_V_1_sel_rd;
    op_V_user_V_1_state_cmp_full <= '0' when (op_V_user_V_1_state = ap_const_lv2_1) else '1';

    op_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_876, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_876 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            op_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            op_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    op_V_user_V_1_vld_out <= op_V_user_V_1_state(0);
    or_ln28_fu_462_p2 <= (select_ln25_fu_356_p3 or select_ln25_4_fu_454_p3);
    or_ln32_1_fu_678_p2 <= (and_ln32_fu_617_p2 or and_ln28_fu_673_p2);
    or_ln32_fu_629_p2 <= (icmp_ln32_reg_899 or icmp_ln28_reg_890);
    or_ln40_1_fu_644_p2 <= (or_ln32_fu_629_p2 or and_ln40_2_reg_905);
    or_ln40_fu_638_p2 <= (xor_ln40_fu_633_p2 or or_ln32_fu_629_p2);
    or_ln44_1_fu_728_p2 <= (and_ln44_7_fu_723_p2 or and_ln40_3_fu_712_p2);
    or_ln44_fu_654_p2 <= (xor_ln44_fu_649_p2 or or_ln40_1_fu_644_p2);
    or_ln48_1_fu_576_p3 <= (ap_const_lv31_0 & or_ln48_2_fu_570_p2);
    or_ln48_2_fu_570_p2 <= (or_ln48_fu_564_p2 or icmp_ln48_1_fu_547_p2);
    or_ln48_fu_564_p2 <= (xor_ln48_fu_558_p2 or select_ln25_1_fu_414_p3);
    select_ln25_1_fu_414_p3 <= 
        icmp_ln48_fu_308_p2 when (icmp_ln27_fu_330_p2(0) = '1') else 
        icmp_ln48_2_fu_408_p2;
    select_ln25_2_fu_428_p3 <= 
        and_ln40_1_fu_314_p2 when (icmp_ln27_fu_330_p2(0) = '1') else 
        and_ln40_4_fu_422_p2;
    select_ln25_3_fu_442_p3 <= 
        and_ln44_1_fu_320_p2 when (icmp_ln27_fu_330_p2(0) = '1') else 
        and_ln44_4_fu_436_p2;
    select_ln25_4_fu_454_p3 <= 
        ap_phi_mux_y_0_phi_fu_190_p4 when (icmp_ln27_fu_330_p2(0) = '1') else 
        add_ln25_1_fu_346_p2;
    select_ln25_fu_356_p3 <= 
        x_0_reg_197 when (icmp_ln27_fu_330_p2(0) = '1') else 
        ap_const_lv31_0;
    select_ln28_fu_691_p3 <= 
        tmp_data_V_fu_92 when (icmp_ln28_reg_890(0) = '1') else 
        select_ln48_fu_605_p3;
    select_ln32_1_fu_698_p3 <= 
        tmp_data_V_fu_92 when (and_ln32_fu_617_p2(0) = '1') else 
        select_ln28_fu_691_p3;
    select_ln32_fu_622_p3 <= 
        tmp_user_V_fu_100 when (and_ln32_fu_617_p2(0) = '1') else 
        icmp_ln28_reg_890;
    select_ln48_fu_605_p3 <= 
        ap_const_lv32_0 when (icmp_ln48_3_reg_918(0) = '1') else 
        ap_const_lv32_7F0000FF;
    sub_ln40_1_fu_221_p2 <= std_logic_vector(unsigned(ball_y_read_reg_801) - unsigned(ball_size_read_reg_787));
    sub_ln40_fu_213_p2 <= std_logic_vector(unsigned(ball_x_read_reg_795) - unsigned(ball_size_read_reg_787));
    tmp_data_V_1_fu_734_p3 <= 
        ap_const_lv32_7F0000FF when (or_ln44_1_fu_728_p2(0) = '1') else 
        select_ln32_1_fu_698_p3;
    tmp_last_V_1_fu_684_p2 <= (or_ln32_1_fu_678_p2 and and_ln44_3_fu_660_p2);
    tmp_user_V_1_fu_666_p2 <= (select_ln32_fu_622_p3 and and_ln44_3_fu_660_p2);
    x_fu_590_p2 <= std_logic_vector(unsigned(select_ln25_fu_356_p3) + unsigned(ap_const_lv31_1));
    xor_ln28_fu_612_p2 <= (icmp_ln28_reg_890 xor ap_const_lv1_1);
    xor_ln32_fu_706_p2 <= (or_ln32_fu_629_p2 xor ap_const_lv1_1);
    xor_ln40_1_fu_717_p2 <= (or_ln40_1_fu_644_p2 xor ap_const_lv1_1);
    xor_ln40_2_fu_269_p2 <= (icmp_ln40_fu_264_p2 xor ap_const_lv1_1);
    xor_ln40_3_fu_280_p2 <= (icmp_ln40_1_fu_275_p2 xor ap_const_lv1_1);
    xor_ln40_4_fu_369_p2 <= (icmp_ln40_2_fu_364_p2 xor ap_const_lv1_1);
    xor_ln40_5_fu_380_p2 <= (icmp_ln40_3_fu_375_p2 xor ap_const_lv1_1);
    xor_ln40_6_fu_484_p2 <= (icmp_ln40_4_fu_479_p2 xor ap_const_lv1_1);
    xor_ln40_7_fu_495_p2 <= (icmp_ln40_5_fu_490_p2 xor ap_const_lv1_1);
    xor_ln40_fu_633_p2 <= (ap_const_lv1_1 xor and_ln40_2_reg_905);
    xor_ln44_1_fu_291_p2 <= (icmp_ln44_fu_286_p2 xor ap_const_lv1_1);
    xor_ln44_2_fu_302_p2 <= (icmp_ln44_1_fu_297_p2 xor ap_const_lv1_1);
    xor_ln44_3_fu_391_p2 <= (icmp_ln44_2_fu_386_p2 xor ap_const_lv1_1);
    xor_ln44_4_fu_402_p2 <= (icmp_ln44_3_fu_397_p2 xor ap_const_lv1_1);
    xor_ln44_5_fu_518_p2 <= (icmp_ln44_4_fu_513_p2 xor ap_const_lv1_1);
    xor_ln44_6_fu_529_p2 <= (icmp_ln44_5_fu_524_p2 xor ap_const_lv1_1);
    xor_ln44_fu_649_p2 <= (ap_const_lv1_1 xor and_ln44_2_reg_912);
    xor_ln48_fu_558_p2 <= (icmp_ln48_4_fu_553_p2 xor ap_const_lv1_1);
    zext_ln25_1_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_y_0_phi_fu_190_p4),32));
    zext_ln25_2_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_fu_356_p3),32));
    zext_ln25_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_1_fu_346_p2),32));
    zext_ln27_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_197),32));
end behav;
